// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum UserRole {
  PATIENT
  DOCTOR
  CLINIC_ADMIN
  SYSTEM_ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          UserRole  @default(PATIENT)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  patient       Patient?
  doctor        Doctor?
  clinicAdmin   ClinicAdmin?
  accounts      Account[]
  sessions      Session[]
  sentMessages  Message[]  @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Patient {
  id                String   @id @default(cuid())
  userId            String   @unique
  dateOfBirth       DateTime?
  gender            String?
  phoneNumber       String?
  address           String?
  emergencyContact  String?
  pinCode           String   // Hashed PIN code for medical record access
  bloodType         String?
  allergies         String?
  chronicConditions String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicalRecords    MedicalRecord[]
  appointments      Appointment[]
  clinicPatients    ClinicPatient[]
  prescriptions     Prescription[]
}

model Doctor {
  id                String   @id @default(cuid())
  userId            String   @unique
  specialization    String
  licenseNumber     String   @unique
  yearsOfExperience Int?
  education         String?
  biography         String?
  consultationFee   Float?
  availableFrom     String?
  availableTo       String?
  availableDays     String?  // Stored as JSON string: ["Monday", "Tuesday", ...]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clinicDoctors     ClinicDoctor[]
  appointments      Appointment[]
  medicalRecords    MedicalRecord[]
  prescriptions     Prescription[]
}

model Clinic {
  id                String   @id @default(cuid())
  name              String
  address           String
  city              String
  state             String?
  country           String
  postalCode        String
  phoneNumber       String
  email             String?
  website           String?
  latitude          Float?
  longitude         Float?
  openingHours      String?  // Stored as JSON string
  services          String?  // Stored as JSON string
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  clinicAdmins      ClinicAdmin[]
  clinicDoctors     ClinicDoctor[]
  clinicPatients    ClinicPatient[]
  healthCampaigns   HealthCampaign[]
}

model ClinicAdmin {
  id        String   @id @default(cuid())
  userId    String   @unique
  clinicId  String
  position  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clinic    Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
}

model ClinicDoctor {
  id        String   @id @default(cuid())
  clinicId  String
  doctorId  String
  startDate DateTime @default(now())
  endDate   DateTime?
  status    String   @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clinic    Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model ClinicPatient {
  id        String   @id @default(cuid())
  clinicId  String
  patientId String
  startDate DateTime @default(now())
  endDate   DateTime?
  status    String   @default("ACTIVE") // ACTIVE, INACTIVE
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clinic    Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model MedicalRecord {
  id          String   @id @default(cuid())
  patientId   String
  doctorId    String?
  title       String
  description String
  date        DateTime
  type        String   // CONSULTATION, TEST, SURGERY, etc.
  attachments String?  // JSON array of attachment URLs
  isApproved  Boolean  @default(false)
  pinAccess   Boolean  @default(true) // Whether PIN is required for access
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor      Doctor?  @relation(fields: [doctorId], references: [id])
}

model Appointment {
  id          String   @id @default(cuid())
  patientId   String
  doctorId    String
  date        DateTime
  startTime   String
  endTime     String
  status      String   // SCHEDULED, COMPLETED, CANCELLED
  type        String   // IN_PERSON, VIRTUAL
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor      Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Prescription {
  id          String   @id @default(cuid())
  patientId   String
  doctorId    String
  date        DateTime
  medications String   // JSON array of medications
  instructions String?
  duration    Int?     // Duration in days
  isApproved  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor      Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Message {
  id          String   @id @default(cuid())
  senderId    String
  receiverId  String
  content     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model HealthCampaign {
  id          String   @id @default(cuid())
  clinicId    String
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  type        String   // BLOOD_DONATION, VACCINATION, AWARENESS, etc.
  status      String   // UPCOMING, ACTIVE, COMPLETED
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  clinic      Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
